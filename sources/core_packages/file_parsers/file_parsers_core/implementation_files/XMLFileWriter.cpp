//--------------------------------------------------------//
//-------------------- System includes -------------------//
//--------------------------------------------------------//

//--------------------------------------------------------//
//-------------------- External Library Files ------------//
//--------------------------------------------------------//

//--------------------------------------------------------//
//--------------------- Package includes -----------------//
//--------------------------------------------------------//
#include "XMLFileWriter.h"

namespace ANANSI {

//////////////////////////////////////////////////////////////////////////////
/////////////////////////////// PUBLIC ///////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

//============================= LIFECYCLE ====================================

XMLFileWriter::XMLFileWriter()
{
    return;
}

XMLFileWriter::XMLFileWriter( XMLFileWriter const & other)
{
    if (this != &other)
    {
    }
    return;
}

XMLFileWriter::XMLFileWriter( XMLFileWriter && other)
{
    if (this != &other)
    {
    }
    return;
}		// -----  end of method XMLFileWriter::XMLFileWriter  -----


XMLFileWriter::~XMLFileWriter()
{
    return;
}

//============================= ACCESSORS ====================================

XMLFileWriter * XMLFileWriter::clone() const
{
    return new XMLFileWriter(*this);
}

void XMLFileWriter::write(const boost::property_tree::ptree & tree, const std::string filename) const
{
    boost::property_tree::write_xml(filename,tree);
    return;
}

//============================= MUTATORS =====================================

//============================= OPERATORS ====================================

XMLFileWriter& XMLFileWriter::operator= ( const XMLFileWriter &other )
{
    if (this != &other)
    {
    }
    return *this;
} // assignment operator

XMLFileWriter& XMLFileWriter::operator= ( XMLFileWriter && other )
{
    if (this != &other)
    {
    }
    return *this;
} // assignment-move operator

//////////////////////////////////////////////////////////////////////////////
/////////////////////////////// PROTECTED ////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

//============================= LIFECYCLE ====================================

//============================= ACCESSORS ====================================

//============================= MUTATORS =====================================

//============================= OPERATORS ====================================

//////////////////////////////////////////////////////////////////////////////
/////////////////////////////// PRIVATE //////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
    
//============================= LIFECYCLE ====================================

//============================= ACCESSORS ====================================

//============================= MUTATORS =====================================

//============================= OPERATORS ====================================


} // namespace ANANSI
