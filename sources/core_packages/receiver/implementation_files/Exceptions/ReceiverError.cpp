
//--------------------------------------------------------//
//-------------------- System includes -------------------//
//--------------------------------------------------------//

//--------------------------------------------------------//
//-------------------- External Library Files ------------//
//--------------------------------------------------------//

//--------------------------------------------------------//
//--------------------- Package includes -----------------//
//--------------------------------------------------------//
#include "ReceiverError.h"

namespace RECEIVER {

//////////////////////////////////////////////////////////////////////////////
/////////////////////////////// PUBLIC ///////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

//============================= LIFECYCLE ====================================

ReceiverError::ReceiverError()
{
    return;
}

ReceiverError::ReceiverError( const std::string error_message)
{
    this->errorMessage_ = error_message;
    return;
}

ReceiverError::ReceiverError( ReceiverError const & other)
{
    if (this != &other)
    {
        
    }
    return;
}

ReceiverError::ReceiverError( ReceiverError && other)
{
    if (this != &other)
    {
        
    }
    return;
}		// -----  end of method ReceiverError::ReceiverError  -----


ReceiverError::~ReceiverError()
{
    return;
}

//============================= ACCESSORS ====================================
const char* ReceiverError::what() const noexcept
{
    return this->errorMessage_.c_str();
}

//============================= MUTATORS =====================================

//============================= OPERATORS ====================================

ReceiverError& ReceiverError::operator= ( const ReceiverError &other )
{
    if (this != &other)
    {

    }
    return *this;
} // assignment operator

ReceiverError& ReceiverError::operator= ( ReceiverError && other )
{
    if (this != &other)
    {

    }
    return *this;
} // assignment-move operator

//////////////////////////////////////////////////////////////////////////////
/////////////////////////////// PROTECTED ////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

//============================= LIFECYCLE ====================================

//============================= ACCESSORS ====================================

//============================= MUTATORS =====================================

//============================= OPERATORS ====================================

//////////////////////////////////////////////////////////////////////////////
/////////////////////////////// PRIVATE //////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
    
//============================= LIFECYCLE ====================================

//============================= ACCESSORS ====================================

//============================= MUTATORS =====================================

//============================= OPERATORS ====================================


} // namespace RECEIVER
